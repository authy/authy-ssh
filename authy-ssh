#!/bin/bash

VERSION="1.0"
AUTHY_URL="https://api.authy.com"
APP_ROOT=`dirname $0`
CONFIG_FILE="$APP_ROOT/authy-ssh.conf"

export TERM="xterm-256color"
NORMAL=$(tput sgr0)
GREEN=$(tput setaf 2; tput bold)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)

function red() {
    echo -e "$RED$*$NORMAL"
}

function green() {
    echo -e "$GREEN$*$NORMAL"
}

function yellow() {
    echo -e "$YELLOW$*$NORMAL"
}

function debug() {
    if [[ $DEBUG ]]
    then
        echo ">>> $*"
    fi
}

function require_root() {
    find_sshd_config
    if [[ ! -w $SSHD_CONFIG ]]
    then
      red "root permisisons are required to run this command. try again using sudo"
      exit -1
    fi
}

function require_curl() {
    curl --help 2>&1 > /dev/null

    if [ $? -ne 0 ]
    then
        red "install curl and try again"
        run_shell
    fi
}

function find_sshd_config() {
    if [[ -f /etc/sshd_config ]]
    then
        SSHD_CONFIG="/etc/sshd_config"
    elif [[ -f /etc/ssh/sshd_config ]]
    then
        SSHD_CONFIG="/etc/ssh/sshd_config"
    else
        red "Cannot find sshd_config in your server. Authy SSH will be enabled when you add the ForceCommand to it"
    fi
}

function add_force_command() {
    find_sshd_config
    authy_ssh_command="$1"

    if [[ -w $SSHD_CONFIG ]]
    then
      yellow "Adding 'ForceCommand ${authy_ssh_command} login' to ${SSHD_CONFIG}"
      uninstall_authy "quiet" # remove previous installations

      echo "ForceCommand ${authy_ssh_command} login" >> ${SSHD_CONFIG}
      echo ""
      red "    MAKE SURE YOU DO NOT MOVE/REMOVE ${authy_ssh_command} BEFORE UNINSTALLING AUTHY SSH"
      sleep 5
    fi
}

function install_authy() {
    source="$1"
    dest="$2/authy-ssh"
    if [[ ! $2 ]]
    then
      dest="/usr/local/bin/authy-ssh" # defaults to /usr/local/bin
    fi
    config_file="${dest}.conf"

    if [[ ! -r `dirname $dest` ]]
    then
      red "${dest} is not writable. Try again using sudo"
      return 1
    fi

    yellow "Copying ${source} to ${dest}..."
    cp "${source}" "${dest}"

    yellow "Setting up permissions..."
    chmod 755 $dest

    if [[ ! -f ${config_file} ]]
    then
      echo -n "Enter the Authy API key: "
      read  authy_api_key

      if [ ${#authy_api_key} != 32 ]
      then
        red "you have entered a wrong API key"
        return 1
      fi

      echo "Default action when api.authy.com cannot be contacted: "
      echo ""
      echo "  1. Disable two factor authentication until api.authy.com is back"
      echo "  2. Don't allow logins until api.authy.com is back"
      echo ""
      echo -n "type 1 or 2 to select the option: "
      read default_verify_action

      case $default_verify_action in
        1)
          default_verify_action="disable"
          ;;
        2)
          default_verify_action="enforce"
          ;;
      esac

      yellow "Generating initial config on ${config_file}..."
      echo "banner=Good job! You've securely logged in with Authy." > "${config_file}"
      echo "api_key=${authy_api_key}" >> "${config_file}"
      echo "default_verify_action=${default_verify_action}" >> "${config_file}"
    else
      red "A config file was found on ${config_file}. Edit it manually if you want to change the API key"
    fi
    chmod 644 ${config_file}

    add_force_command "${dest}"

    echo ""
    echo "To enable two-factor authentication on your account type the following command: "
    echo ""

    if [[ $SUDO_USER ]]
    then
      green "   sudo ${dest} enable $SUDO_USER <your-email> <your-numeric-country-code> <your-cellphone>"
      green "   Example: sudo $0 enable $SUDO_USER myuser@example.com 1 401-390-9987"
    else
      green "   sudo ${dest} enable $USER <your-email> <your-numeric-country-code> <your-cellphone>"
      green "   Example: sudo $0 enable $USER myuser@example.com 1 401-390-9987"
    fi
    echo ""
    echo "To enable two-factor authentication on user account type: "
    echo ""
    green "   sudo ${dest} enable <local-username> <user-email> <user-cellphone-country-code> <user-cellphone>"
    echo ""
    echo "To uninstall Authy SSH type:"
    echo ""
    green "   sudo ${dest} uninstall"
    echo ""
    yellow "      Restart the SSH server to apply changes"
    echo ""
}

function uninstall_authy() {
    find_sshd_config

    if [[ $1 != "quiet" ]]
    then
      yellow "Uninstalling Authy SSH from $SSHD_CONFIG..."
    fi

    if [[ -w $SSHD_CONFIG ]]
    then
        sed -ie '/^ForceCommand.*authy-ssh.*/d' $SSHD_CONFIG
    fi

    if [[ $1 != "quiet" ]]
    then
        green "Authy SSH was uninstalled."
        yellow "Now restart the ssh server to apply changes and then remove ${APP_ROOT}/authy-ssh and $CONFIG_FILE"
    fi
}

function check_config_file() {
    dir=`dirname ${CONFIG_FILE}`
    if [[ ! -r $dir ]]
    then
        red "ERROR: ${dir} cannot be written by $USER"
        return 1
    fi

    if [[ ! -f $CONFIG_FILE ]]
    then
        red "Authy ssh have not been configured" # FIXME: add more info
        return 1
    fi

    if [[ $1 == "writable" && ! -w $CONFIG_FILE ]]
    then
        red "$CONFIG_FILE is not writable. Please try again using sudo"
        exit -1
    fi

    chmod 644 $CONFIG_FILE 2>/dev/null
    return 0
}

# Checks if the API KEY is valid. This function receives one argument which can be:
#   - run: runs a shell even if the test fails.
#   - anything else: exits the command
function check_api_key() {
    default_action=$1
    if [[ $AUTHY_API_KEY == "replace_me" || ! $AUTHY_API_KEY ]]
    then
        red "Cannot find a valid api key"
        case $default_action in
        run)
            run_shell ;;
        *)
            exit 1 ;;
        esac
    fi
}

# Usage: $(read_config banner)
function read_config() {
    key="$1"

    if [[ ! -f $CONFIG_FILE ]]
    then
        echo "ERROR: $config_file couldn't be found"
        run_shell
    fi

    while IFS='=' read -r ckey value
    do
        if [[ $ckey == $key ]]
        then
            echo $value # don't stop the loop to be able to read repeated keys
        fi
    done < $CONFIG_FILE
}

function install_user() {
    local_user=$1
    if [[ !$local_user ]]
    then
        local_user=$USER
    fi

    eval home_path="~$local_user"
    auth_keys="${home_path}/.ssh/authorized_keys"

    if [[ -f $auth_keys ]]
    then
        echo "Installing authy on ${auth_keys}..."
        cp "${auth_keys}" "${auth_keys}.backup.$(date +%F)"
        sed -ie "s/^\(ssh-.*\)$/command=\"$(echo $COMMAND | sed -e 's/[\/&]/\\&/g') login\" \\1/" "${auth_keys}"
        green "authy-ssh was installed on $local_user account"
        yellow "Please verify that you can log in before closing this session"
    else
        yellow "Please add allowed keys to ${auth_keys} and try again"
        return -1
    fi
}

# usage: register_user "local_user" "<email>" "<country-code>" "<cellphone>"
function register_user() {
    local_user=$1
    url="$AUTHY_URL/protected/json/users/new?api_key=${AUTHY_API_KEY} -d user[email]=$2 -d user[country_code]=$3 -d user[cellphone]=$4 -s"

    response=`id ${local_user} 2>/dev/null`
    if [[ $? -ne 0 ]]
    then
        red "$local_user was not found in your system"
        exit 1
    fi

    response=`curl ${url} 2>/dev/null`
    ok=true

    debug "[register-user] url: $url response: $response. curl exit stats: $?"

    if [[ $response == *cellphone* ]]
    then
        yellow "Cellphone is invalid"
        ok=false
    fi

    if [[ $response == *email* ]]
    then
        yellow "Email is invalid"
        ok=false
    fi

    if [[ $ok == false ]]
    then
        exit 1
    fi

    if [[ $response == *user*id* ]]
    then
        user_id=`echo $response | grep -o '[0-9]\{1,\}'` # match the authy id
        if [[ $user_id ]]
        then
            echo "user=$local_user:$user_id" >> $CONFIG_FILE
            green "User was registered"
        else
            red "Cannot register user: $response"
        fi
    elif [[ $response == "invalid key" ]]
    then
        yellow "The api_key value in $CONFIG_FILE is not valid"
    else
        red "Unknown response: $response"
    fi
}

function run_shell() {
    if [ $SSH_ORIGINAL_COMMAND ] # when user runs: ssh server <command>
    then
        debug "running command: $SSH_ORIGINAL_COMMAND"
        $SSH_ORIGINAL_COMMAND
        exit 0
    elif [ $SHELL ] # when user runs: ssh server
    then
        debug "running shell: $SHELL"
        $SHELL
        exit 0
    fi
}

function find_authy_id() {
    for user in `read_config user`
    do
        IFS=":"; declare -a authy_user=($user)
        if [[ ${authy_user[0]} == $USER ]]
        then
            echo ${authy_user[1]}
            return 0
        fi
    done
}

function test_authy_ssh() {
    run "test"
}

function login() {
    authy_token="$1"
    mode="$2"
    authy_id=$(find_authy_id)

    url="$AUTHY_URL/protected/json/verify/${authy_token}/${authy_id}?api_key=${AUTHY_API_KEY}"
    response=`curl -sL -w "%{http_code}" "${url}" -o /dev/null`
    curl_exit_code=$?

    debug "[verify-token] url: $url response: $response. curl exit status: $curl_exit_code"

    if [ $curl_exit_code -ne 0 ] # something went wrong when running the command, let it pass
    then
        red "Error running curl"
    fi

    if [ "$response" == "200" ]
    then
        green $(read_config banner)
        if [[ $mode != "test" ]]
        then
            run_shell
        else
            exit 0
        fi
    elif [ "$response" == "401" ]
    then
        red "Invalid token. try again"
    else
        default_verify_action="$(read_config default_verify_action)"
        case $default_verify_action in
          enforce)
              red "Two-factor authentication is down. Please try again later."
              exit 0
              ;;
          *)
              run_shell
              ;;
        esac
    fi
}

function request_sms() {
    authy_id=$(find_authy_id) # read authy id that matches $USER
    url="$AUTHY_URL/protected/json/sms/${authy_id}?api_key=${AUTHY_API_KEY}&force=true"

    response=`curl ${url} 2>/dev/null`
    debug "[request sms] url: $url response: $response. curl exit stats: $?"

    if [[ $response == *success*sent* ]]
    then
        green "SMS message was sent"
    elif [[ $response == *sms*not*enabled* ]]
    then
        yellow "SMS is not enabled for this account"
    else
        red "Message couldn't be sent: $response"
    fi
}

function run() {
    mode="$1"
    if [[ ! $(find_authy_id) ]] #user is not using authy, let it go
    then
        if [[ $mode == "test" ]]
        then
            red "Cannot find authy id for $USER in $CONFIG_FILE"
            red "You have to enable it using 'authy-ssh enable'"
            exit -1
        else
            debug "cannot find authy id in $CONFIG_FILE"
            run_shell
        fi
    fi

    while :
    do
        echo -n "Authy Token (type 'sms' to request a SMS token): "
        read authy_token

        case $authy_token in
            sms) request_sms ;;
            *) login $authy_token $mode;;
        esac
    done
}

require_curl

# get the absolute path to the command
cd `dirname $0`
COMMAND="$PWD/`basename $0`" 
cd - >/dev/null

case $1 in
    install)
        require_root
        install_authy $0 $2
        ;;
    uninstall)
        require_root
        uninstall_authy
        ;;
    test|check)
        check_config_file
        AUTHY_API_KEY="$(read_config api_key)"
        check_api_key "exit"
        test_authy_ssh
        ;;
    enable|register)
        require_root
        check_config_file "writable"
        AUTHY_API_KEY="$(read_config api_key)"
        check_api_key "exit"
        register_user $2 $3 $4 $5
        ;;
    login)
        check_config_file
        AUTHY_API_KEY="$(read_config api_key)"
        check_api_key "run"
        run
        ;;
    protect)
        check_config_file
        AUTHY_API_KEY="$(read_config api_key)"
        install_user $2
        ;;
    version)
        echo "Authy SSH v$VERSION"
        exit 0
        ;;
    *)
        cat <<__EOF__
Usage: authy-ssh <command> <arguments>

VERSION $VERSION

Available commands:

    install
        installs Authy SSH in the given directory. This command needs sudo if the directory is not writable.

        sudo $0 install /usr/local/bin

    uninstall
        uninstalls Authy SSH from sshd_config

        sudo $0 uninstall

    test
        tests if the Authy SSH is working correctly

    enable
        receives a list of arguments needed to register a user. usage:

        sudo $0 enable <local-user> <email> <numeric country code> <cellphone>

        Example: sudo $0 enable myuser myuser@example.com 1 401-390-9987

    protect
        installs authy-ssh for the given user

        $0 protect <local-user>

    login
        ask a token to the user if it is already registered.

    version
        prints the Authy SSH version

__EOF__
        ;;
esac
